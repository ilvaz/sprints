!<arch>
mx_printchar.c  1600613828  501   20    100644  104       `
#include <unistd.h>

void mx_printchar(char c);

void mx_printchar(char c){
        write(1, &c, 1);
}

mx_printint.c   1600786955  501   20    100644  585       `
#include <stdbool.h>

void mx_printchar(char c);

void mx_printint(int n);

void mx_printint(int n) {
    char s[20];
    int size = 0;
    bool is_negative = false;
    
    if (n == 0) {
        mx_printchar('0');
        return;
    }
    
    if (n < 0) {
        is_negative = true;
        n *= -1;
    }
    
    while (n > 0) {
        s[size] = n % 10 + '0';
        n -= n % 10;
        n /= 10;
        size++;
    }
    if (is_negative){
        mx_printchar('-');
    }
    for (size -= 1; size >= 0; size--){
        mx_printchar(s[size]);
    }
    mx_printchar('\n');}

mx_printstr.c   1600763938  501   20    100644  133       `
#include <unistd.h>

int mx_strlen(char *s);

void mx_printstr(char *s);

void mx_printstr(char *s) {
	write(1, s, mx_strlen(s));
}


mx_strlen.c     1600762006  501   20    100644  110       `
int mx_strlen(char *s);

int mx_strlen(char *s) {
	int i = 0;
	while (s[i] != '\0') {
		i++;
	}
	return i;
}

mx_strcmp.c     1600773845  501   20    100644  331       `
int mx_strcmp(const char *s1, const char *s2);

int mx_strcmp(const char *s1, const char *s2) {
    int i = 0;
    int result = 0;
    while (s1[i] != '\0' && s2[i] != '\0'){
        if (s1[i] == s2[i]){
            i++;
        } else {
            result = s1[i] - s2[i];
            break;
        }
    }
    return result;
}


mx_isdigit.c    1600781767  501   20    100644  144       `
#include <stdbool.h>

bool mx_isdigit(int c);

bool mx_isdigit(int c) {
	if (c > 47 && c < 58) {
		return true;
	} else {
		return false;
	}
}

mx_isspace.c    1600782118  501   20    100644  125       `
#include <stdbool.h>

bool mx_isspace(char c);

bool mx_isspace(char c) {
	if (c == ' ') return true;
	else return false;
}


mx_atoi.c       1600786305  501   20    100644  690       `
#include <stdbool.h>

bool mx_isdigit(int c);

bool mx_isspace(char c);

int mx_atoi(const char *str);

int mx_atoi(const char *str) {
    int result = 0;
    int i = 0;
    bool is_negative = false;
    
    if (str[0] == '-') {
        is_negative = true;
        i++;
    }

    if (str[0] == '+') {
        i++;
    }
    
    while (str[i] != '\0') {
        if (!mx_isdigit(str[i])) {
            return 0;
        }
        int tmp = (int)str[i] - 48;
        if (i == 0) {
            result += tmp;
        } else {
            result *= 10;
            result += tmp;
        }
        i++;
    }
    
    if (is_negative) {
        result *= -1;
    }
    
    return result;
}

